/*
SMART KEYPAD - ADVANCED
Given a long vector of strings, print the strings that contain the strings generated by numeric string str.

string searchIn [] = {
            "prateek", "sneha", "deepak", "arnav", "shikha", "palak",
            "utkarsh", "divyam", "vidhi", "sparsh", "akku"
    };
For example, if the input is 26 and the string is coding, then output should be coding since 26 can produce co which is contained in coding.


Input Format:
A numeric string str

Constraints:
len(str) < 10
No of strings in the vector < 10

Output Format:
Each matched string from the given vector.

Sample Input:
34
Sample Output:
vidhi
divyam
sneha
Explanation:
34 will result into combinations :

*dg         *eg         *fg
*dh            *eh         *fh
*di            *ei         *fi
Corresponding strings are output.

vidhi contains dh
divyam contains di
sneha contains eh

*/



#include <iostream>
#include <cstring>
using namespace std;
string table[] = { " ", ".+@$", "abc", "def", "ghi", "jkl" , "mno", "pqrs" , "tuv", "wxyz" };
int tableSize = sizeof(table)/sizeof(string);
string searchIn [] = {
            "prateek", "sneha", "deepak", "arnav", "shikha", "palak",
            "utkarsh", "divyam", "vidhi", "sparsh", "akku"
    };
int l = sizeof(searchIn)/sizeof(string) ; 
string temp[10000];
long p=0;
void phoneKeypad(char *inp,char *out,int i,int j)
{
    //Base case
    if(inp[i]=='\0')
    {
        out[j] = '\0';
        temp[p++]=out;
        //cout<<"out = "<<out<<endl;
        return ;
    }

    //Rec case
    int r = inp[i]-'0';
    for(unsigned int k = 0; k< table[r].length() ;k++)
    {
        char ch = table[r][k];
        out[j] = ch;
        phoneKeypad(inp,out,i+1,j+1);
       
    }
    //cout<<endl;
}

void searchInTable()
{
    for(int i=0;i<p;i++)
    {
        for(int j=0;j<l;j++)
        {
            if(searchIn[j].find(temp[i])!=string::npos)
            cout<<searchIn[j]<<endl;
        }
    }
}
int main() 
{
    char input[100];
    cin>>input;

    char output[100];
    phoneKeypad(input,output,0,0);
   // for(int i = 0; i < p; i++)
     //   cout<<temp[i]<<endl;
    searchInTable();
    return 0;
}

/*
Better Method 
#include <bits/stdc++.h>
using namespace std;

vector<string> table = {" ", ".+@$", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};

vector<string> searchIn = {
    "prateek", "sneha", "deepak", "arnav", "shikha", "palak",
    "utkarsh", "divyam", "vidhi", "sparsh", "akku"};

void phoneKeypad(string inp, string out)
{
    //Base case
    if (inp.size() == 0)
    {
        for (string ss : searchIn)
        {
            if (ss.find(out) != ss.npos)
            {
                cout << ss << endl;
            }
        }
        return;
    }

    //Rec case
    char ch = inp[0];
    string ros = inp.substr(1);
    string code = table[ch - '0'];

    for (int i = 0; i < code.length(); i++)
        phoneKeypad(ros, out + code[i]);
}

int main()
{
    string input;
    cin >> input;

    string output;
    phoneKeypad(input, output);
    return 0;
}

*/


